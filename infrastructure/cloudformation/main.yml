AWSTemplateFormatVersion: '2010-09-09'
Description: 'GorillaBooks - Cost-optimized infrastructure for small deployments'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - staging
    Description: Environment name

  AppName:
    Type: String
    Default: gorillabooks
    Description: Application name (used for resource naming)

  DomainName:
    Type: String
    Description: Custom domain name (optional, e.g., gorillabooks.example.com). If provided, ACM cert and Route53 record will be created automatically.
    Default: ''

  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID for the domain (required if DomainName is provided)
    Default: ''

Conditions:
  UseCustomDomain: !Not [!Equals [!Ref DomainName, '']]
  NoCustomDomain: !Equals [!Ref DomainName, '']

Resources:
  # ACM Certificate (auto-created if domain provided)
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-certificate'

  # AWS Secrets Manager - Auto-generated secrets
  MongoDBPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AppName}-${Environment}-mongodb-password'
      Description: Auto-generated MongoDB password for DocumentDB
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: password
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-mongodb-password'

  JWTSecretSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AppName}-${Environment}-jwt-secret'
      Description: Auto-generated JWT signing secret
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: secret
        PasswordLength: 64
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-jwt-secret'

  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-vpc'

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-public-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-public-subnet-2'

  # Single private subnet for database (no multi-AZ needed)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-private-subnet-1'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-igw'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-public-rt'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-alb-sg'

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-ecs-sg'

  MongoDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for MongoDB DocumentDB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-mongodb-sg'

  # ECR Repositories
  BackendECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub '${AppName}-backend'
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [{
              "rulePriority": 1,
              "description": "Keep last 10 images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 10
              },
              "action": { "type": "expire" }
            }]
          }

  FrontendECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub '${AppName}-frontend'
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [{
              "rulePriority": 1,
              "description": "Keep last 10 images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 10
              },
              "action": { "type": "expire" }
            }]
          }

  # DocumentDB (MongoDB) - Cost-optimized with smallest instance
  MongoDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for MongoDB DocumentDB
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-mongodb-subnet-group'

  MongoDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      DBClusterIdentifier: !Sub '${AppName}-${Environment}-mongodb'
      MasterUsername: gorillabooks
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${MongoDBPasswordSecret}:SecretString:password}}'
      DBSubnetGroupName: !Ref MongoDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref MongoDBSecurityGroup
      BackupRetentionPeriod: 1
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: 'mon:04:00-mon:05:00'
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-mongodb'

  MongoDBInstance:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref MongoDBCluster
      DBInstanceClass: db.t4g.medium
      DBInstanceIdentifier: !Sub '${AppName}-${Environment}-mongodb-instance'
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-mongodb-instance'

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AppName}-${Environment}'
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-cluster'

  # Application Load Balancer
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AppName}-${Environment}-alb'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-alb'

  # Target Groups
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AppName}-${Environment}-backend-tg'
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AppName}-${Environment}-frontend-tg'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # ALB Listeners
  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - !If
          - UseCustomDomain
          - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: '443'
              StatusCode: HTTP_301
          - Type: forward
            TargetGroupArn: !Ref FrontendTargetGroup

  ALBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: UseCustomDomain
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup

  ALBListenerRuleHTTP:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: NoCustomDomain
    Properties:
      ListenerArn: !Ref ALBListenerHTTP
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - '/api/*'
            - '/health'
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  ALBListenerRuleHTTPS:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: UseCustomDomain
    Properties:
      ListenerArn: !Ref ALBListenerHTTPS
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - '/api/*'
            - '/health'
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  # Route53 DNS Record
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: UseCustomDomain
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
        DNSName: !GetAtt ALB.DNSName

  # ECS Task Execution Role (with Secrets Manager access)
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - !Ref MongoDBPasswordSecret
                  - !Ref JWTSecretSecret
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Environment}-ecs-execution-role'

  # CloudWatch Log Groups
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${AppName}-${Environment}/backend'
      RetentionInDays: 3

  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${AppName}-${Environment}/frontend'
      RetentionInDays: 3

  # ECS Task Definitions - Minimized CPU/Memory
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AppName}-${Environment}-backend'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: backend
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppName}-backend:latest'
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: '3000'
            - Name: MONGODB_URI
              Value: !Sub 'mongodb://gorillabooks:{{resolve:secretsmanager:${MongoDBPasswordSecret}:SecretString:password}}@${MongoDBCluster.Endpoint}:27017/gorillabooks?tls=true&replicaSet=rs0&readPreference=secondaryPreferred&retryWrites=false'
          Secrets:
            - Name: JWT_SECRET
              ValueFrom: !Sub '${JWTSecretSecret}:secret::'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BackendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AppName}-${Environment}-frontend'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: frontend
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppName}-frontend:latest'
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FrontendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # ECS Services
  BackendService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListenerHTTP
    Properties:
      ServiceName: !Sub '${AppName}-${Environment}-backend'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref BackendTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 3000
          TargetGroupArn: !Ref BackendTargetGroup

  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: ALBListenerHTTP
    Properties:
      ServiceName: !Sub '${AppName}-${Environment}-frontend'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref FrontendTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 80
          TargetGroupArn: !Ref FrontendTargetGroup

Outputs:
  LoadBalancerURL:
    Description: URL of the Application Load Balancer
    Value: !Sub 'http://${ALB.DNSName}'
    Export:
      Name: !Sub '${AppName}-${Environment}-alb-url'

  BackendECRRepository:
    Description: Backend ECR Repository URI
    Value: !GetAtt BackendECRRepository.RepositoryUri
    Export:
      Name: !Sub '${AppName}-${Environment}-backend-ecr'

  FrontendECRRepository:
    Description: Frontend ECR Repository URI
    Value: !GetAtt FrontendECRRepository.RepositoryUri
    Export:
      Name: !Sub '${AppName}-${Environment}-frontend-ecr'

  MongoDBEndpoint:
    Description: MongoDB DocumentDB Cluster Endpoint
    Value: !GetAtt MongoDBCluster.Endpoint
    Export:
      Name: !Sub '${AppName}-${Environment}-mongodb-endpoint'

  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AppName}-${Environment}-ecs-cluster'

  MongoDBPasswordSecretArn:
    Description: ARN of the MongoDB password secret in Secrets Manager
    Value: !Ref MongoDBPasswordSecret
    Export:
      Name: !Sub '${AppName}-${Environment}-mongodb-password-secret'

  JWTSecretArn:
    Description: ARN of the JWT secret in Secrets Manager
    Value: !Ref JWTSecretSecret
    Export:
      Name: !Sub '${AppName}-${Environment}-jwt-secret'
